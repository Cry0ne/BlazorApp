@page "/adddepartment"
@using BlazorApp.Context;
@using BlazorApp.Entities;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Mvc;
@inject IDbContextFactory<PhoneBookContext> DbFactory


@if (SubmitResult != null)
{
    <h3>
        Статус: @SubmitResult
    </h3>
}
<EditForm Model=@Department OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
     <DataAnnotationsValidator />
     <ValidationSummary />
    <h3>Название отдела</h3>
    <InputText @bind-Value=@Department.Name />
    <br />
    <button type="submit" class="btn btn-success">Добавить</button>
 </EditForm>

 <hr />
 <table class="table">
     <thead>
         <tr>
            <td>Id</td>
            <td>Название</td>
         </tr>
     </thead>
     <tbody>
        @foreach (var department in Departments)
        {
            <tr>
                 <td>@department.Id</td>
                 <td>@department.Name</td>
            </tr>
        }
     </tbody>
 </table>


@code {
    private List<Department> Departments { get; set; }

    public Department Department = new Department();

    string SubmitResult;

    protected override Task OnInitializedAsync()
    {
        ReloadAsync();
        return base.OnInitializedAsync();
    }

    private Task ReloadAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Departments = context.Departments.ToList();
        return Task.CompletedTask;
    }


    async Task ValidFormSubmitted(EditContext editContext)
    {
        using var context = DbFactory.CreateDbContext();

        if (Department is not null)
        {
            context.Departments?.Add(Department);
        }
        try
        {
            await context.SaveChangesAsync();
        }
        catch{}
        ReloadAsync();
        SubmitResult = "Отдел добавлен";
    }

    void InvalidFormSubmitted(EditContext editContext)
    {
        SubmitResult = "Отдел не был добавлен";
    }
}


