@page "/addcontact"
@using AntDesign;
@using BlazorApp.Context;
@using BlazorApp.Entities;
@using Microsoft.AspNetCore.Components.Forms;
@inject IDbContextFactory<PhoneBookContext> DbFactory
@inject IMessageService _message

<PageTitle>Добавить контакт</PageTitle>
<Space>
    <SpaceItem>
        <Form Model=@_contact OnFinish="ValidFormSubmitted" OnFinishFailed="InvalidFormSubmitted">
            <FormItem Label="Имя">
                <Input @bind-Value="@_contact.Name" />
            </FormItem>
            <FormItem Label="Телефон">
                <Input @bind-Value="@_contact.Phone" />
            </FormItem>
            <FormItem Label="Адрес">
                <Input @bind-Value="@_contact.Address" />
            </FormItem>
            <FormItem Label="Кабинет">
                <Select @bind-Value="@_contact.OfficeId"
                        Style="width: 120px;"
                        DefaultValue="0"
                        TItemValue="int"
                        TItem="string"
                        Placeholder="Выбрать...">
                    <SelectOptions>
                        @foreach (var office in _offices)
                        {
                            <SelectOption TItemValue="int" TItem="string" Value="@office.Id" Label="@office.Number.ToString()" />
                        }
                    </SelectOptions>
                </Select>
            </FormItem>
            <FormItem Label="Отдел">
                <Select @bind-Value="@_contact.DepartmentId"
                        Style="width: 120px;"
                        DefaultValue="0"
                        TItemValue="int"
                        TItem="string"
                        Placeholder="Выбрать...">
                    <SelectOptions>
                        @foreach (var department in _departments)
                        {
                            <SelectOption TItemValue="int" TItem="string" Value="@department.Id" Label="@department.Name.ToString()" />
                        }
                    </SelectOptions>
                </Select>
            </FormItem>
            <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="StateHasChanged">
                Добавить
            </Button>
        </Form>
    </SpaceItem>
</Space>


<hr />

@if (_contacts == null || _departments == null || _offices == null)
{
    <Spin Tip="Загрузка..." />
}
else
{
    <Table DataSource=@_contacts HidePagination>
        <PropertyColumn Filterable Property="c=>c.Id"></PropertyColumn>
        <PropertyColumn Filterable Property="c=>c.Name" Title="Имя"></PropertyColumn>
        <PropertyColumn Filterable Property="c=>c.Phone" Title="Номер телефона"></PropertyColumn>
        <PropertyColumn Filterable Property="c=>c.Address" Title="Адрес"></PropertyColumn>
        <PropertyColumn Filterable Property="c=>c.Office.Number" Title="Кабинет"></PropertyColumn>
        <PropertyColumn Filterable Property="c=>c.Department.Name" Title="Отдел"></PropertyColumn>
        <ActionColumn>
            <Popconfirm Title="Удалить?" OnConfirm="()=> DeleteContact(context.Id)" OkText="Да" CancelText="Нет">
                <Button Danger>Удалить</Button>
            </Popconfirm>
        </ActionColumn>
    </Table>
}

@code {
    private List<Contact> _contacts { get; set; } = new List<Contact>();
    private List<Department> _departments { get; set; } = new List<Department>();
    private List<Office> _offices { get; set; } = new List<Office>();
    private Contact _contact = new Contact();


    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        _contacts = await context.Contacts.ToListAsync();
        _departments = await context.Departments.ToListAsync();
        _offices = await context.Offices.ToListAsync();
        StateHasChanged();
    }

    private async Task DeleteContact(int id)
    {
        var contact = _contacts.Find(d => d.Id == id);
        using var context = DbFactory.CreateDbContext();

        if (contact is not null)
        {
            _contacts.Remove(contact);
            context.Remove<Contact>(contact);
            await context.SaveChangesAsync();
        }
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();

            if (_contact is not null)
            {
                context.Contacts?.Add(_contact);
                await context.SaveChangesAsync();
                await _message.Success("Готово!", 5);
            }
            
        }catch(Exception ex)
        {
            await _message.Error($"{ex.Message}", 5);
        }
    }

    async Task InvalidFormSubmitted(EditContext editContext)
    {
        await _message.Error("Форма заполнена неверно.", 5);
    }
}