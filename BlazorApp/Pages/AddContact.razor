@page "/addcontact"
@using BlazorApp.Context;
@using BlazorApp.Entities;
@using Microsoft.AspNetCore.Components.Forms;
@inject IDbContextFactory<PhoneBookContext> DbFactory


@if (SubmitResult != null)
{
    <h2>
        Статус: @SubmitResult
    </h2>
}

<EditForm Model=@Contact OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
     <DataAnnotationsValidator />
     <ValidationSummary />
     <h3>Имя</h3>
     <InputText @bind-Value=@Contact.Name />

     <h3>Телефон</h3>
     <InputText @bind-Value=@Contact.Phone />

     <h3>Адрес</h3>
     <InputText @bind-Value=@Contact.Adress />

     <h3>Кабинет</h3>
     <InputNumber max @bind-Value=@Contact.Office />

     <h3>Отдел</h3>
     <InputSelect  @bind-Value="@Contact.DepartmentId">
             <option value=0>Выбрать отдел</option>
         @foreach (var department in Departments)
         {
             <option value=@department.Id>@department.Name</option>
         }
     </InputSelect>

     <br />
     <button type="submit" class="btn btn-success">Добавить</button>
 </EditForm>

 <hr />

<table class="table">
    <thead>
        <tr>
            <td>Id</td>
            <td>Имя</td>
            <td>Телефон</td>
            <td>Адрес</td>
            <td>Кабинет</td>
            <td>Отдел</td>
        </tr>
    </thead>
    <tbody>
        @foreach (var contact in Contacts)
        {
            <tr>
                <td>@contact.Id</td>
                <td>@contact.Name</td>
                <td>@contact.Phone</td>
                <td>@contact.Adress</td>
                <td>@contact.Office</td>
                <td>@contact.Department.Name</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Department> Departments { get; set; }

    private List<Contact> Contacts { get; set; }

    public Contact Contact = new Contact();

    string SubmitResult;

    protected override Task OnInitializedAsync()
    {
        ReloadAsync();
        return base.OnInitializedAsync();
    }

    private Task ReloadAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Departments = context.Departments.ToList();
        Contacts = context.Contacts.ToList();
        return Task.CompletedTask;
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {
        using var context = DbFactory.CreateDbContext();

        if (Contact is not null)
        {
            context.Contacts?.Add(Contact);
        }
        try
        {
            await context.SaveChangesAsync();
        }
        catch{}
        SubmitResult = "Контакт добавлен";
    }

    void InvalidFormSubmitted(EditContext editContext)
    {
        SubmitResult = "Контакт не был добавлен";
    }
}