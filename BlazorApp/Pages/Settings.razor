@page "/settings"
@using AntDesign;
@using BlazorApp.Context;
@using BlazorApp.Entities;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Mvc;
@inject IDbContextFactory<PhoneBookContext> DbFactory
@inject IMessageService _message

<PageTitle>Настройки</PageTitle>


<Space Direction="DirectionVHType.Vertical" Style="max-width:600px">
    <SpaceItem>
        <Card Title=@("Отделы") >
            <Form Model=@_department OnFinish="ValidFormSubmitted" OnFinishFailed="InvalidFormSubmitted" LabelColSpan="8" WrapperColSpan="16">
                <FormItem>
                    <Input @bind-Value="@_department.Name" />
                </FormItem>
                <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="StateHasChanged">
                    Добавить
                </Button>
            </Form>
            <hr />
            <Space>
                @if (_departments == null)
                {
                    <Spin Tip="Загрузка..." />
                }
                else
                {
                    <Table DataSource=@_departments HidePagination>
                        <PropertyColumn Filterable Property="c=>c.Id"></PropertyColumn>
                        <PropertyColumn Filterable Property="c=>c.Name" Title="Название"></PropertyColumn>
                        <ActionColumn>
                            <Popconfirm Title="Удалить?" OnConfirm="()=> DeleteDepartment(context.Id)" OkText="Да" CancelText="Нет">
                                <Button Danger>Удалить</Button>
                            </Popconfirm>
                        </ActionColumn>
                    </Table>
                }
            </Space>
        </Card>
    </SpaceItem>
    <SpaceItem>
        <Card Title=@("Кабинеты") Style="width:100%">
            <Form Model=@_office OnFinish="ValidFormSubmitted" OnFinishFailed="InvalidFormSubmitted" LabelColSpan="8" WrapperColSpan="16">
                <FormItem>
                    <Input @bind-Value="@_office.Number" />
                </FormItem>
                <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="StateHasChanged">
                    Добавить
                </Button>
            </Form>
            <hr />
            <Space>
                @if (_offices == null)
                {
                    <Spin Tip="Загрузка..." />
                }
                else
                {
                    <Table DataSource=@_offices HidePagination>
                        <PropertyColumn Filterable Property="c=>c.Id"></PropertyColumn>
                        <PropertyColumn Filterable Property="c=>c.Number" Title="Номер кабинета"></PropertyColumn>
                        <ActionColumn>
                            <Popconfirm Title="Удалить?" OnConfirm="()=> DeleteOffice(context.Id)" OkText="Да" CancelText="Нет">
                                <Button Danger>Удалить</Button>
                            </Popconfirm>
                        </ActionColumn>
                    </Table>
                }
            </Space>
        </Card>
    </SpaceItem>
</Space>

@code {
    private List<Department> _departments { get; set; } = new List<Department>();
    private List<Office> _offices { get; set; } = new List<Office>();

    public Department _department = new Department();
    public Office _office = new Office();

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        _departments = await context.Departments.ToListAsync();
        _offices = await context.Offices.ToListAsync();
    }


    private async Task DeleteDepartment(int id)
    {
        var department = _departments.Find(d => d.Id == id);
        using var context = DbFactory.CreateDbContext();

        if (department is not null)
        {
            _departments.Remove(department);
            context.Remove<Department>(department);
            await context.SaveChangesAsync();
        }
    }

    private async Task DeleteOffice(int id)
    {
        var office = _offices.Find(d => d.Id == id);
        using var context = DbFactory.CreateDbContext();

        if (office is not null)
        {
            _offices.Remove(office);
            context.Remove<Office>(office);
            await context.SaveChangesAsync();
        }
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {
        using var context = DbFactory.CreateDbContext();
        switch (editContext.Model)
        {
            case Department:
                if (_department is not null)
                {
                    _departments.Add(_department);
                    context.Departments?.Add(_department);
                }
                break;
            case Office:
                if (_office is not null)
                {
                    _offices.Add(_office);
                    context.Offices?.Add(_office);
                }
                break;
        }

        await context.SaveChangesAsync();
        await _message.Success("Готово!", 5);
    }

    async Task InvalidFormSubmitted(EditContext editContext)
    {
        await _message.Error("Форма заполнена неверно.", 5);
    }
}


