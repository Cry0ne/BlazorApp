@page "/"
@using AntDesign;
@using BlazorApp.Context;
@using BlazorApp.Entities;
@inject IDbContextFactory<PhoneBookContext> DbFactory
@inject IMessageService _message

<PageTitle>Телефонный справочник</PageTitle>
@if (_contacts == null || _departments == null)
{
    <Spin Tip="Загрузка..."/>
}
else
{
    <Table DataSource=@_contacts HidePagination>
        <PropertyColumn Filterable Property="c=>c.Id"></PropertyColumn>
        <PropertyColumn Filterable Property="c=>c.Name" Title="Имя"></PropertyColumn>
        <PropertyColumn Filterable Property="c=>c.Phone" Title="Номер телефона"></PropertyColumn>
        <PropertyColumn Filterable Property="c=>c.Address" Title="Адрес"></PropertyColumn>
        <PropertyColumn Filterable Property="c=>c.Office.Number" Title="Кабинет"></PropertyColumn>
        <PropertyColumn Filterable Property="c=>c.Department.Name" Title="Отдел"></PropertyColumn>
        <ActionColumn>
            <Popconfirm Title="Удалить?" OnConfirm="()=> DeleteContact(context.Id)" OkText="Да" CancelText="Нет">
                <Button Danger>Удалить</Button>
            </Popconfirm>
        </ActionColumn>
    </Table>
}
@code {
    private List<Contact> _contacts { get; set; } = new List<Contact>();
    private List<Department> _departments { get; set; } = new List<Department>();
    private List<Office> _offices { get; set; } = new List<Office>();

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        _contacts = await context.Contacts.ToListAsync();
        _departments = await context.Departments.ToListAsync();
        _offices = await context.Offices.ToListAsync();
        StateHasChanged();
    }

    private async Task DeleteContact(int id)
    {
        var contact = _contacts.Find(d => d.Id == id);
        using var context = DbFactory.CreateDbContext();

        if (contact is not null)
        {
            _contacts.Remove(contact);
            context.Remove<Contact>(contact);
            await context.SaveChangesAsync();
            await _message.Success("Готово!", 5);
        }
    }
}